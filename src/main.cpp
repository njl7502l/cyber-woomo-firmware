#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <IRutils.h>
#include <WiFiClientSecure.h>
#include <MQTTClient.h>
#include <ArduinoJson.h>
#include "secrets.h"
#include "WiFi.h"


#define AWS_IOT_SUBSCRIBE_TOPIC "woomo/sub"

const uint16_t kIrLed = 17; //赤外線LEDのピンを取得
 
IRsend irsend(kIrLed);      // 送信オブジェクト

bool success = true;

// 点灯ボタン
uint16_t rawData[179] = {3434, 1554,  536, 1142,  536, 310,  538, 310,  536, 308,  536, 308,  536, 308,  540, 306,  538, 316,  538, 308,  538, 308,  540, 306,  540, 304,  540, 1136,  544, 302,  544, 302,  544, 310,  542, 302,  544, 300,  544, 302,  544, 300,  546, 1130,  546, 1132,  548, 300,  546, 308,  546, 298,  546, 298,  546, 298,  548, 296,  548, 1128,  548, 296,  550, 1128,  550, 306,  550, 1128,  550, 1128,  552, 1128,  552, 1128,  552, 294,  552, 1126,  552, 294,  552, 1136,  552, 294,  552, 294,  552, 294,  552, 294,  552, 292,  552, 292,  556, 290,  552, 300,  556, 1122,  554, 1124,  554, 1126,  556, 1124,  556, 1122,  556, 1126,  554, 1124,  556, 1132,  558, 290,  556, 1122,  558, 288,  558, 288,  558, 288,  558, 286,  558, 286,  558, 294,  560, 1118,  560, 286,  560, 1118,  562, 1118,  560, 1118,  562, 1144,  536, 1144,  534, 1154,  534, 314,  532, 1146,  534, 312,  534, 312,  534, 312,  532, 314,  534, 1142,  530, 1156,  536, 1146,  532, 314,  534, 1144,  534, 1146,  534, 1146,  534, 1144,  534, 312,  534, 316,  532}; 
// 消灯ボタン
// uint16_t rawData[539] = {3364, 1614,  470, 1228,  450, 394,  448, 398,  444, 400,  470, 348,  470, 398,  446, 398,  442, 384,  468, 398,  448, 396,  446, 374,  470, 396,  444, 1202,  472, 398,  446, 398,  444, 408,  444, 398,  470, 374,  444, 400,  442, 376,  466, 1228,  444, 1230,  444, 400,  468, 384,  442, 402,  470, 398,  422, 398,  470, 400,  416, 1230,  444, 402,  444, 1230,  444, 410,  444, 1228,  444, 1256,  420, 1232,  468, 1208,  470, 398,  420, 1230,  468, 376,  442, 1264,  420, 424,  420, 398,  470, 398,  420, 422,  446, 400,  418, 402,  466, 376,  466, 408,  418, 1230,  468, 1230,  420, 1256,  444, 1208,  442, 1258,  420, 1232,  468, 1230,  448, 1238,  422, 1256,  446, 1230,  418, 428,  444, 376,  442, 400,  470, 396,  420, 424,  446, 406,  444, 400,  444, 398,  444, 1230,  446, 1230,  444, 1230,  446, 1230,  446, 1230,  448, 1238,  446, 428,  418, 1230,  472, 372,  420, 422,  474, 372,  444, 398,  446, 1228,  446, 1238,  450, 1226,  446, 398,  470, 1206,  444, 1204,  472, 1232,  442, 1232,  446, 398,  448, 398,  472, 30430,  3348, 1638,  446, 1232,  420, 424,  420, 424,  446, 398,  444, 398,  446, 398,  444, 398,  446, 410,  442, 374,  442, 450,  422, 398,  444, 398,  444, 1232,  446, 398,  446, 398,  444, 412,  444, 398,  442, 400,  444, 400,  444, 402,  442, 1230,  444, 1232,  444, 400,  446, 410,  442, 402,  442, 400,  442, 400,  444, 400,  446, 1228,  444, 404,  442, 1230,  446, 408,  448, 1230,  468, 1234,  446, 1204,  446, 1254,  448, 396,  422, 1256,  416, 428,  418, 1242,  444, 402,  468, 400,  418, 426,  444, 400,  418, 426,  442, 376,  444, 424,  444, 406,  444, 1256,  394, 1230,  446, 1256,  446, 1232,  420, 1234,  444, 1258,  446, 1230,  442, 1220,  444, 1260,  442, 1234,  418, 426,  418, 426,  444, 398,  446, 400,  418, 402,  468, 382,  470, 400,  444, 398,  444, 1204,  472, 1230,  444, 1232,  444, 1208,  498, 1204,  472, 1190,  496, 350,  494, 1204,  476, 370,  446, 398,  446, 398,  472, 374,  496, 1178,  472, 1212,  446, 1208,  496, 372,  476, 1202,  446, 1230,  500, 1178,  450, 1204,  470, 400,  472, 372,  474, 30418,  3400, 1584,  502, 1176,  522, 348,  470, 372,  472, 350,  496, 374,  472, 350,  470, 372,  498, 380,  444, 398,  472, 370,  474, 346,  496, 372,  474, 1202,  476, 368,  472, 374,  470, 378,  474, 372,  472, 370,  472, 374,  470, 370,  476, 1204,  494, 1180,  470, 372,  476, 356,  470, 398,  472, 374,  472, 374,  468, 374,  498, 1174,  446, 398,  448, 1230,  472, 382,  498, 1178,  498, 1180,  496, 1156,  496, 1206,  496, 348,  498, 1178,  472, 374,  498, 1184,  498, 348,  472, 372,  472, 374,  496, 348,  470, 372,  496, 374,  448, 370,  472, 384,  496, 1178,  472, 1204,  500, 1178,  470, 1230,  474, 1204,  474, 1204,  448, 1228,  472, 1216,  472, 1180,  472, 1230,  472, 350,  470, 376,  494, 348,  522, 346,  474, 370,  448, 406,  448, 372,  498, 344,  494, 1182,  496, 1204,  472, 1204,  498, 1156,  496, 1178,  500, 1212,  474, 374,  472, 1204,  478, 370,  472, 370,  472, 348,  524, 318,  522, 1180,  472, 1212,  502, 1152,  472, 398,  474, 1204,  472, 1180,  498, 1178,  524, 1156,  496, 372,  476, 372,  448};

WiFiClientSecure net = WiFiClientSecure();
MQTTClient client = MQTTClient(256);

unsigned int pubCount = 0;
unsigned long loopCount = 0;

// サブスクライブしているトピックを受信したときの割り込みハンドラ
void messageHandler(String &topic, String &payload) {

  Serial.println("incoming: " + topic + " - " + payload);
  
  Serial.println("try");
  
  irsend.sendRaw(rawData, 179, 38);
  if (success){
    Serial.println("send success");
  }
}

// AWS IoT Core接続機能の初期化処理
void setup_connection(){
  // Wi-Fiに接続する
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  // Wi-Fiに接続待ち
  Serial.println("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }
  Serial.println(".");

  // AWS IoT Coreに接続
  net.setCACert(AWS_CERT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);
  client.begin(AWS_IOT_ENDPOINT, 8883, net);

  // サブスクライブしているトピックを受信したときの割り込みハンドラを指定
  client.onMessage(messageHandler);

  // AWS IoT Coreに接続待ち
  Serial.println("Connecting to AWS IOT");
  while (!client.connect(THINGNAME)) {
    Serial.print(".");
    delay(100);
  }
  Serial.println(".");

  if(!client.connected()){
    Serial.println("AWS IoT Timeout!");
    return;
  }

  // サブスクライブ開始
  client.subscribe(AWS_IOT_SUBSCRIBE_TOPIC);

  Serial.println("AWS IoT Connected!");
}

void setup() {
  Serial.begin(115200);
  irsend.begin(); // 赤外線LEDの設定
  setup_connection();
}
 
void loop() {
  Serial.println("looop");
  client.loop();
  delay(1000);
}
